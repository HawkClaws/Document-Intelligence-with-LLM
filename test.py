from toc_content_extractor import TocContentExtractor

# テスト用の目次とコンテンツ
toc = """# 勇者ロトの伝説：新たなる冒険

## 旅立ち
### ルーラの町
### 最初の試練
#### 洞窟の盗賊団
#### 謎の老人
### 仲間との出会い
## 魔王の復活
### 1. 闇の儀式
#### 1.1. 古文書の解読
#### 1.2. 生贄の祭壇
### 2. 魔王軍の侵攻
#### 2.1. エルフの森の防衛戦
##### 2.1.1. 弓使いとの連携
##### 2.1.2. 罠の設置
#### 2.2. ドワーフの砦の救援
### 3. 決戦の地へ
## ロトの帰還
### 世界の再建
### 新たな旅の予感"""

content = """旅 立 ち
物語は、勇者ロトが新たな冒険に出るところから始まる。

ル ー ラ の 町
ロトはまず、ルーラの町を訪れた。
この町は平和で、人々は親切だった。

最 初 の 試 練
旅の初めに、ロトはいくつかの試練に直面する。

洞 窟 の 盗 賊 団
ロトは洞窟に潜む盗賊団と戦い、勝利した。
盗賊団は、村人から盗んだ宝物を持っていた。

仲 間 と の 出 会 い
旅の途中、ロトは仲間と出会い、共に冒険を続けることになった。
仲間は、戦士、魔法使い、僧侶、賢者で構成されていた。

魔 王 の 復 活
平和な時代は長くは続かず、魔王が復活の兆しを見せ始める。

1. 闇 の 儀 式
魔王復活のため、闇の儀式が執り行われようとしていた。

1 .１. 古 文 書 の 解 読
闇の儀式には、古代の魔術書が必要だった。
魔王軍は、古文書を手に入れるため各地を襲撃した。
その襲撃は、小規模なものから大規模なものまで様々だった。


2. 魔 王 軍 の 侵 攻
魔王軍が世界各地に侵攻を開始した。

2 .1. エ ル フ の 森 の 防 衛 戦
エルフの森が魔王軍の攻撃を受けた。

2.1. 2. 罠 の 設 置
エルフたちは、森のあちこちに罠を設置して、魔王軍に対抗した。

３. 決 戦 の 地 へ
ロトたちは、魔王との決戦の地へ向かった。

ロ ト の 帰 還
魔王を倒したロトは、世界に平和をもたらした。

世 界 の 再 建
魔王との戦いで荒廃した世界を、人々は力を合わせて再建した。

新 た な 旅 の 予 感
平和が訪れたが、ロトの冒険はまだ終わらない。
"""

# 期待される出力
expected = """# 勇者ロトの伝説：新たなる冒険

## 旅立ち
旅立ち物語は、勇者ロトが新たな冒険に出るところから始まる。
### ルーラの町
ルーラの町ロトはまず、ルーラの町を訪れた。この町は平和で、人々は親切だった。
### 最初の試練
最初の試練旅の初めに、ロトはいくつかの試練に直面する。
#### 謎の老人
洞窟の盗賊団ロトは洞窟に潜む盗賊団と戦い、勝利した。盗賊団は、村人から盗んだ宝物を持っていた。
### 仲間との出会い
仲間との出会い旅の途中、ロトは仲間と出会い、共に冒険を続けることになった。仲間は、戦士、魔法使い、僧侶、賢者で構成されていた。
## 魔王の復活
魔王の復活平和な時代は長くは続かず、魔王が復活の兆しを見せ始める。
### 1. 闇の儀式
1.闇の儀式魔王復活のため、闇の儀式が執り行われようとしていた。
#### 1.2. 生贄の祭壇
1.1.古文書の解読闇の儀式には、古代の魔術書が必要だった。魔王軍は、古文書を手に入れるため各地を襲撃した。その襲撃は、小規模なものから大規模なものまで様々だった。
### 2. 魔王軍の侵攻
2.魔王軍の侵攻魔王軍が世界各地に侵攻を開始した。
##### 2.1.1. 弓使いとの連携
2.1.エルフの森の防衛戦エルフの森が魔王軍の攻撃を受けた。
#### 2.2. ドワーフの砦の救援
2.1.2.罠の設置エルフたちは、森のあちこちに罠を設置して、魔王軍に対抗した。
### 3. 決戦の地へ
3.決戦の地へロトたちは、魔王との決戦の地へ向かった。
## ロトの帰還
ロトの帰還魔王を倒したロトは、世界に平和をもたらした。
### 世界の再建
世界の再建魔王との戦いで荒廃した世界を、人々は力を合わせて再建した。
### 新たな旅の予感
新たな旅の予感平和が訪れたが、ロトの冒険はまだ終わらない。"""

expected_markdown_list = ['# 勇者ロトの伝説：新たなる冒険', '', '## 旅立ち', '旅立ち物語は、勇者ロトが新たな冒険に出るところから始まる。', '### ルーラの町', 'ルーラの町ロトはまず、ルーラの町を訪れた。この町は平和で、人々は親切だった。', '### 最初の試練', '最初の試練旅の初めに、ロトはいくつかの試練に直面する。', '#### 謎の老人', '洞窟の盗賊団ロトは洞窟に潜む盗賊団と戦い、勝利した。盗賊団は、村人から盗んだ宝物を持っていた。', '### 仲間との出会い', '仲間との出会い旅の途中、ロトは仲間と出会い、共に冒険を続けることになった。仲間は、戦士、魔法使い、僧侶、賢者で構成されていた。', '## 魔王の復活', '魔王の復活平和な時代は長くは続かず、魔王が復活の兆しを見せ始める。', '### 1. 闇の儀式', '1.闇の儀式魔王復活のため、闇の儀式が執り行われようとしていた。', '#### 1.2. 生贄の祭壇', '1.1.古文書の解読闇の儀式には、古代の魔術書が必要だった。魔王軍は、古文書を手に入れるため各地を襲撃した。その襲撃は、小規模なものから大規模なものまで様々だった。', '### 2. 魔王軍の侵攻', '2.魔王軍の侵攻魔王軍が世界各地に侵攻を開始した。', '##### 2.1.1. 弓使いとの連携', '2.1.エルフの森の防衛戦エルフの森が魔王軍の攻撃を受けた。', '#### 2.2. ドワーフの砦の救援', '2.1.2.罠の設置エルフたちは、森のあちこちに罠を設置して、魔王軍に対抗した。', '### 3. 決戦の地へ', '3.決戦の地へロトたちは、魔王との決戦の地へ向かった。', '## ロトの帰還', 'ロトの帰還魔王を倒したロトは、世界に平和をもたらした。', '### 世界の再建', '世界の再建魔王との戦いで荒廃した世界を、人々は力を合わせて再建した。', '### 新たな旅の予感', '新たな旅の予感平和が訪れたが、ロトの冒険はまだ終わらない。']


def extract_content_by_toc_without_verbose(toc, content):
    # クラスのインスタンスを作成し、メソッドを呼び出して結果を検証
    matcher = TocContentExtractor(toc_max_level=5)
    merged_result = matcher.extract_content_by_toc(toc, content, verbose=True)
    markdown_content = merged_result["markdown_content"]
    assert markdown_content == expected, f"\nGot:\n{merged_result}\nExpected:\n{expected}"
    assert merged_result['match_success'] == ['# 勇者ロトの伝説：新たなる冒険', '## 旅立ち', '### ルーラの町', '### 最初の試練', '#### 謎の老人', '### 仲間との出会い', '## 魔王の復活', '### 1. 闇の儀式', '#### 1.2. 生贄の祭壇', '### 2. 魔王軍の侵攻', '##### 2.1.1. 弓使いとの連携', '#### 2.2. ドワーフの砦の救援', '### 3. 決戦の地へ', '## ロトの帰還', '### 世界の再建', '### 新たな旅の予感']
    assert merged_result['toc_list'] == ['# 勇者ロトの伝説：新たなる冒険', '## 旅立ち', '### ルーラの町', '### 最初の試練', '#### 洞窟の盗賊団', '#### 謎の老人', '### 仲間との出会い', '## 魔王の復活', '### 1. 闇の儀式', '#### 1.1. 古文書の解読', '#### 1.2. 生贄の祭壇', '### 2. 魔王軍の侵攻', '#### 2.1. エルフの森の防衛戦', '##### 2.1.1. 弓使いとの連携', '##### 2.1.2. 罠の設置', '#### 2.2. ドワーフの砦の救援', '### 3. 決戦の地へ', '## ロトの帰還', '### 世界の再建', '### 新たな旅の予感']
    assert merged_result['match_failed'] == ['#### 謎の老人', '#### 1.2. 生贄の祭壇', '##### 2.1.1. 弓使いとの連携', '#### 2.2. ドワーフの砦の救援']
    assert merged_result['markdown_content_list'] == expected_markdown_list
    print("Test passed. The merged content matches the expected output.")

def extract_content_by_toc(toc, content):
    # クラスのインスタンスを作成し、メソッドを呼び出して結果を検証
    matcher = TocContentExtractor(toc_max_level=5)
    merged_result = matcher.extract_content_by_toc(toc, content)
    assert merged_result == expected, f"\nGot:\n{merged_result}\nExpected:\n{expected}"
    print("Test passed. The merged content matches the expected output.")


if __name__ == "__main__":
    extract_content_by_toc(toc, content)
    extract_content_by_toc_without_verbose(toc, content)





